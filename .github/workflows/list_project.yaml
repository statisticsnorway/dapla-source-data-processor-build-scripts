name: Kildomaten

on:
  pull_request:


permissions:
  contents: "read"
  id-token: "write"

jobs:
  fetch_sources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Create matrix
        id: step_create_matrix
        run: |
          MATRIX="["
          first=true

          for folder in automation/source_data/*/*; do
            if [ -d "$folder" ]; then
              [ "$first" = false ] && MATRIX+=','
              env=$(basename "$(dirname "$folder")")
              source=$(basename "$folder")
              MATRIX+="\"$source,$env\""
              first=false
            fi
          done
          MATRIX+="]"

          # Check if the matrix is empty
          if [ "$MATRIX" = "[]" ]; then
            echo "Error: Could not find any sources for Kildomaten. Please verify that your source configuration matches the description in the Dapla manual: https://manual.dapla.ssb.no/automatisering.html#konfigurere-en-kilde"
            exit 1
          fi

          echo "Matrix value: $MATRIX"
          echo "env_matrix=$MATRIX" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.step_create_matrix.outputs.env_matrix }}

  deploy_sources:
    runs-on: ubuntu-latest
    needs: fetch_sources
    strategy:
      matrix:
        source: ${{fromJson(needs.fetch_sources.outputs.matrix)}}
    steps:
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1.1.1"
        with:
          workload_identity_provider: "projects/848539402404/locations/global/workloadIdentityPools/gh-actions/providers/gh-actions"
          service_account: ${{ secrets.TEST_SA }}
          token_format: "access_token"
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          version: '>= 363.0.0'
      - name : 'Set project display name'
        id: source_metadata
        run: |
          MATRIX=${{ matrix.source }}
          IFS=',' read -r SOURCE_NAME PROJECT_DISPLAY_NAME <<< "$MATRIX"
          echo project_display_name=$PROJECT_DISPLAY_NAME >> $GITHUB_OUTPUT
          echo source_name=$SOURCE_NAME >> $GITHUB_OUTPUT
      - name: 'Get project name'
        id: get_project_name
        env:
          PROJECT_DISPLAY_NAME: ${{ steps.source_metadata.outputs.project_display_name }}
        run: |
          import os
          project_display_name = os.getenv("PROJECT_DISPLAY_NAME")
          environment = project_display_name.split("-")[-1]
          length_of_environment = len(environment)
          project_name = project_display_name[:1-length_of_environment]
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'project_name={project_name}', file=fh)
        shell: python
      - name: Get project id
        id: get_project_id
        run: |
          project_name=${{steps.get_project_name.outputs.project_name}}
          project_id=$(gcloud projects list --filter="name:${project_name}" | awk 'NR==2 {print $1}')
          echo project_id=$project_id >> $GITHUB_OUTPUT
      - name: Output SA email
        id: output_sa_email
        env:
          PROJECT_ID: ${{ steps.get_project_id.outputs.project_id }}
          SOURCE_NAME: ${{ steps.source_metadata.outputs.source_name }}
        run: |
            SA_EMAIL="gha-${SOURCE_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"
            echo sa_email=$SA_EMAIL >> $GITHUB_OUTPUT
      - id: "auth-project-sa"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1.1.1"
        with:
          workload_identity_provider: "projects/848539402404/locations/global/workloadIdentityPools/gh-actions/providers/gh-actions"
          service_account: ${{steps.output_sa_email.outputs.sa_email}}
          token_format: "access_token"
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: 'Deploy source: ${{ matrix.source }}'
        run: |
          MATRIX=${{ matrix.source }}
          IFS=',' read -r FOLDER_NAME ENV_NAME <<< "$MATRIX"
          ./update_cloud_run_images.sh